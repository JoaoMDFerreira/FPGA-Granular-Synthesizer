%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                          %
%          Generated by MATLAB 9.10 and Fixed-Point Designer 7.2           %
%                                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#codegen
%https://www.musicdsp.org/en/latest/Filters/92-state-variable-filter-double-sampled-stable.html
function [y] = andrew_filter_fixpt(in,MIDI_CC_FREQ,CC_RES,type) 
    fm = get_fimath();

    persistent low; %https://www.mathworks.com/help/hdlcoder/ug/optimize-feedback-loop-design-and-maintain-high-data-precision-for-hdl-code-generation.html
    persistent band;
    if isempty(low);
        low = fi(0, 1, 16, -1, fm);
    end
    if isempty(band);
        band = fi(0, 1, 16, -1, fm);
    end
    
    loaded1 = coder.load('MIDI_CC_to_internal_freq.mat');
    loaded = copyTo_loaded(loaded1);
    filter_internal_freq = fi(loaded.filter_internal_freq, 0, 16, 15, fm); %%check LUT_from_MIDI_Note.m
    damp_freq = fi(loaded.damp_freq, 0, 16, 14, fm);
    
    freq = fi(filter_internal_freq(MIDI_CC_FREQ+fi(1, 0, 1, 0, fm)), 0, 16, 15, fm);
    
    res = fi(CC_RES*fi(1/127.0, 0, 16, 22, fm), 0, 16, 15, fm);
    
    damp=fi(min(fi(2.0, 0, 2, 0, fm)*(fi(1.0, 0, 1, 0, fm) -res*fi(2^-2, 0, 16, 17, fm)), damp_freq(MIDI_CC_FREQ+fi(1, 0, 1, 0, fm))), 0, 16, 14, fm);
    
    notch = fi(in - damp*band, 1, 16, -2, fm);
    low(:)   = low + freq*band;
    high  = fi(notch - low, 1, 16, -1, fm);
    band(:)  = freq*high + band;
    switch type
        case fi(1, 0, 1, 0, fm)
            out = fi(fi(0.5, 0, 16, 16, fm)*high, 1, 16, -1, fm);
        case fi(3, 0, 2, 0, fm)
            out = fi(fi(0.5, 0, 16, 16, fm)*notch, 1, 16, -1, fm);
        case fi(2, 0, 2, 0, fm)
            out = fi(fi(0.5, 0, 16, 16, fm)*band, 1, 16, -1, fm);
        otherwise
            out = fi(fi(0.5, 0, 16, 16, fm)*low, 1, 16, -1, fm);            
    end
    notch(:) = in - damp*band;
    low(:)   = low + freq*band;
    high(:)  = notch - low;
    band(:)  = freq*high + band;
    switch type
        case fi(1, 0, 1, 0, fm)
            y = fi(out + fi(0.5, 0, 16, 16, fm)*high, 1, 16, -1, fm);
        case fi(3, 0, 2, 0, fm)
            y = fi(out + fi(0.5, 0, 16, 16, fm)*notch, 1, 16, -1, fm);
        case fi(2, 0, 2, 0, fm)
            y = fi(out + fi(0.5, 0, 16, 16, fm)*band, 1, 16, -1, fm);
        otherwise
            y = fi(out + fi(0.5, 0, 16, 16, fm)*low, 1, 16, -1, fm);
    end

    y = fi(floor(y), 1, 16, -1, fm);
end


function loaded = copyTo_loaded(loaded1)
    coder.inline( 'always' );
    fm = get_fimath();
    loaded.damp_freq = fi( loaded1.damp_freq, 0, 16, 14, fm );
    loaded.filter_internal_freq = fi( loaded1.filter_internal_freq, 0, 16, 15, fm );
end

function fm = get_fimath()
	fm = fimath('RoundingMethod', 'Nearest',...
	     'OverflowAction', 'Wrap',...
	     'ProductMode','FullPrecision',...
	     'SumMode','FullPrecision');
end
