-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\Asurans\Downloads\fac\tese\filter hdl coder matlab\codegen\andrew_filter\hdlsrc\andrew_filter_fixpt.vhd
-- Created: 2023-07-12 17:34:05
-- 
-- Generated by MATLAB 9.10, MATLAB Coder 5.2 and HDL Coder 3.18
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- alpha1        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- y                             alpha1        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: andrew_filter_fixpt
-- Source Path: andrew_filter_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.andrew_filter_fixpt_pkg.ALL;

ENTITY andrew_filter_fixpt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        in_rsvd                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
        MIDI_CC_FREQ                      :   IN    std_logic_vector(6 DOWNTO 0);  -- ufix7
        CC_RES                            :   IN    std_logic_vector(6 DOWNTO 0);  -- ufix7
        type_rsvd                         :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        alpha1                            :   OUT   std_logic;
        y                                 :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_E1
        );
END andrew_filter_fixpt;


ARCHITECTURE rtl OF andrew_filter_fixpt IS

  -- Constants
  CONSTANT tmp_24                         : vector_of_unsigned16(0 TO 127) := 
    (to_unsigned(16#0012#, 16), to_unsigned(16#0013#, 16), to_unsigned(16#0014#, 16), to_unsigned(16#0015#, 16),
     to_unsigned(16#0016#, 16), to_unsigned(16#0018#, 16), to_unsigned(16#0019#, 16), to_unsigned(16#001B#, 16),
     to_unsigned(16#001C#, 16), to_unsigned(16#001E#, 16), to_unsigned(16#0020#, 16), to_unsigned(16#0022#, 16),
     to_unsigned(16#0024#, 16), to_unsigned(16#0027#, 16), to_unsigned(16#0029#, 16), to_unsigned(16#002C#, 16),
     to_unsigned(16#002E#, 16), to_unsigned(16#0031#, 16), to_unsigned(16#0034#, 16), to_unsigned(16#0038#, 16),
     to_unsigned(16#003B#, 16), to_unsigned(16#003F#, 16), to_unsigned(16#0043#, 16), to_unsigned(16#0047#, 16),
     to_unsigned(16#004B#, 16), to_unsigned(16#0050#, 16), to_unsigned(16#0055#, 16), to_unsigned(16#005A#, 16),
     to_unsigned(16#0060#, 16), to_unsigned(16#0066#, 16), to_unsigned(16#006C#, 16), to_unsigned(16#0073#, 16),
     to_unsigned(16#007A#, 16), to_unsigned(16#0082#, 16), to_unsigned(16#008A#, 16), to_unsigned(16#0092#, 16),
     to_unsigned(16#009C#, 16), to_unsigned(16#00A5#, 16), to_unsigned(16#00B0#, 16), to_unsigned(16#00BB#, 16),
     to_unsigned(16#00C6#, 16), to_unsigned(16#00D3#, 16), to_unsigned(16#00E0#, 16), to_unsigned(16#00EE#, 16),
     to_unsigned(16#00FD#, 16), to_unsigned(16#010D#, 16), to_unsigned(16#011D#, 16), to_unsigned(16#012F#, 16),
     to_unsigned(16#0142#, 16), to_unsigned(16#0156#, 16), to_unsigned(16#016C#, 16), to_unsigned(16#0183#, 16),
     to_unsigned(16#019B#, 16), to_unsigned(16#01B4#, 16), to_unsigned(16#01D0#, 16), to_unsigned(16#01ED#, 16),
     to_unsigned(16#020C#, 16), to_unsigned(16#022C#, 16), to_unsigned(16#024F#, 16), to_unsigned(16#0274#, 16),
     to_unsigned(16#029B#, 16), to_unsigned(16#02C5#, 16), to_unsigned(16#02F1#, 16), to_unsigned(16#0320#, 16),
     to_unsigned(16#0352#, 16), to_unsigned(16#0388#, 16), to_unsigned(16#03C0#, 16), to_unsigned(16#03FC#, 16),
     to_unsigned(16#043C#, 16), to_unsigned(16#0480#, 16), to_unsigned(16#04C8#, 16), to_unsigned(16#0514#, 16),
     to_unsigned(16#0565#, 16), to_unsigned(16#05BC#, 16), to_unsigned(16#0618#, 16), to_unsigned(16#0679#, 16),
     to_unsigned(16#06E1#, 16), to_unsigned(16#074F#, 16), to_unsigned(16#07C4#, 16), to_unsigned(16#0840#, 16),
     to_unsigned(16#08C4#, 16), to_unsigned(16#0950#, 16), to_unsigned(16#09E5#, 16), to_unsigned(16#0A84#, 16),
     to_unsigned(16#0B2C#, 16), to_unsigned(16#0BDE#, 16), to_unsigned(16#0C9C#, 16), to_unsigned(16#0D66#, 16),
     to_unsigned(16#0E3C#, 16), to_unsigned(16#0F20#, 16), to_unsigned(16#1012#, 16), to_unsigned(16#1112#, 16),
     to_unsigned(16#1223#, 16), to_unsigned(16#1345#, 16), to_unsigned(16#1479#, 16), to_unsigned(16#15C0#, 16),
     to_unsigned(16#171B#, 16), to_unsigned(16#188C#, 16), to_unsigned(16#1A13#, 16), to_unsigned(16#1BB3#, 16),
     to_unsigned(16#1D6D#, 16), to_unsigned(16#1F41#, 16), to_unsigned(16#2133#, 16), to_unsigned(16#2343#, 16),
     to_unsigned(16#2573#, 16), to_unsigned(16#27C6#, 16), to_unsigned(16#2A3D#, 16), to_unsigned(16#2CDA#, 16),
     to_unsigned(16#2FA0#, 16), to_unsigned(16#3291#, 16), to_unsigned(16#35AF#, 16), to_unsigned(16#38FC#, 16),
     to_unsigned(16#3C7B#, 16), to_unsigned(16#402F#, 16), to_unsigned(16#441A#, 16), to_unsigned(16#483F#, 16),
     to_unsigned(16#4CA1#, 16), to_unsigned(16#5142#, 16), to_unsigned(16#5625#, 16), to_unsigned(16#5B4C#, 16),
     to_unsigned(16#60BA#, 16), to_unsigned(16#6670#, 16), to_unsigned(16#6C72#, 16), to_unsigned(16#72BF#, 16),
     to_unsigned(16#7959#, 16), to_unsigned(16#803F#, 16), to_unsigned(16#8772#, 16), to_unsigned(16#8EEF#, 16));  -- ufix16 [128]
  CONSTANT tmp_26                         : vector_of_unsigned16(0 TO 127) := 
    (to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16),
     to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16),
     to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16),
     to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16),
     to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16),
     to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16),
     to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16),
     to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16),
     to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16),
     to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16),
     to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16),
     to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16),
     to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16),
     to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16),
     to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16),
     to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16),
     to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16),
     to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16),
     to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16),
     to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16),
     to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16),
     to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16),
     to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16),
     to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16),
     to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16),
     to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16),
     to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16),
     to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16),
     to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16),
     to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16),
     to_unsigned(16#8000#, 16), to_unsigned(16#8000#, 16), to_unsigned(16#7BF9#, 16), to_unsigned(16#721A#, 16),
     to_unsigned(16#68AF#, 16), to_unsigned(16#5FB1#, 16), to_unsigned(16#571A#, 16), to_unsigned(16#4EE4#, 16));  -- ufix16 [128]

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL type_unsigned                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL type_rsvd_1                      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL MIDI_CC_FREQ_unsigned            : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp                              : signed(31 DOWNTO 0);  -- int32
  SIGNAL p33tmp_add_temp                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p33tmp_sub_cast                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_1                            : unsigned(15 DOWNTO 0);  -- ufix16_En15
  SIGNAL tmp_2                            : unsigned(15 DOWNTO 0);  -- ufix16_En15
  SIGNAL in_signed                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL in_rsvd_1                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL CC_RES_unsigned                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL c                                : unsigned(33 DOWNTO 0);  -- ufix34_En32
  SIGNAL p31c_mul_temp                    : unsigned(22 DOWNTO 0);  -- ufix23_En22
  SIGNAL p31c_cast                        : unsigned(15 DOWNTO 0);  -- ufix16_En15
  SIGNAL p31c_mul_temp_1                  : unsigned(31 DOWNTO 0);  -- ufix32_En32
  SIGNAL p31c_sub_cast                    : unsigned(33 DOWNTO 0);  -- ufix34_En32
  SIGNAL c_1                              : unsigned(33 DOWNTO 0);  -- ufix34_En32
  SIGNAL tmp_3                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL p29tmp_add_temp                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p29tmp_sub_cast                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_4                            : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL tmp_5                            : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL y_1                              : unsigned(35 DOWNTO 0);  -- ufix36_En32
  SIGNAL tmp_6                            : std_logic;
  SIGNAL p26tmp_cast                      : unsigned(35 DOWNTO 0);  -- ufix36_En32
  SIGNAL tmp_7                            : unsigned(35 DOWNTO 0);  -- ufix36_En32
  SIGNAL tmp_8                            : unsigned(35 DOWNTO 0);  -- ufix36_En32
  SIGNAL tmp_9                            : unsigned(35 DOWNTO 0);  -- ufix36_En32
  SIGNAL damp                             : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL band                             : signed(15 DOWNTO 0);  -- sfix16_E1
  SIGNAL notch                            : signed(15 DOWNTO 0);  -- sfix16_E2
  SIGNAL p14notch_sub_cast                : signed(32 DOWNTO 0);  -- sfix33_En13
  SIGNAL p14notch_cast                    : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL p14notch_mul_temp                : signed(32 DOWNTO 0);  -- sfix33_En13
  SIGNAL p14notch_sub_cast_1              : signed(31 DOWNTO 0);  -- sfix32_En13
  SIGNAL p14notch_sub_cast_2              : signed(32 DOWNTO 0);  -- sfix33_En13
  SIGNAL p14notch_sub_temp                : signed(32 DOWNTO 0);  -- sfix33_En13
  SIGNAL tmp_10                           : signed(15 DOWNTO 0);  -- sfix16_E1
  SIGNAL high                             : signed(15 DOWNTO 0);  -- sfix16_E1
  SIGNAL p9high_sub_cast                  : signed(17 DOWNTO 0);  -- sfix18_E1
  SIGNAL p9high_sub_cast_1                : signed(17 DOWNTO 0);  -- sfix18_E1
  SIGNAL p9high_sub_temp                  : signed(17 DOWNTO 0);  -- sfix18_E1
  SIGNAL tmp_11                           : signed(15 DOWNTO 0);  -- sfix16_E1
  SIGNAL p7tmp_cast                       : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL p7tmp_mul_temp                   : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL p7tmp_add_cast                   : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL p7tmp_add_cast_1                 : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL p7tmp_add_cast_2                 : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL p7tmp_add_temp                   : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL band_1                           : signed(15 DOWNTO 0);  -- sfix16_E1
  SIGNAL notch_1                          : signed(15 DOWNTO 0);  -- sfix16_E2
  SIGNAL p23notch_sub_cast                : signed(32 DOWNTO 0);  -- sfix33_En13
  SIGNAL p23notch_cast                    : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL p23notch_mul_temp                : signed(32 DOWNTO 0);  -- sfix33_En13
  SIGNAL p23notch_sub_cast_1              : signed(31 DOWNTO 0);  -- sfix32_En13
  SIGNAL p23notch_sub_cast_2              : signed(32 DOWNTO 0);  -- sfix33_En13
  SIGNAL p23notch_sub_temp                : signed(32 DOWNTO 0);  -- sfix33_En13
  SIGNAL low                              : signed(15 DOWNTO 0);  -- sfix16_E1
  SIGNAL high_1                           : signed(15 DOWNTO 0);  -- sfix16_E1
  SIGNAL p19high_sub_cast                 : signed(17 DOWNTO 0);  -- sfix18_E1
  SIGNAL p19high_sub_cast_1               : signed(17 DOWNTO 0);  -- sfix18_E1
  SIGNAL p19high_sub_temp                 : signed(17 DOWNTO 0);  -- sfix18_E1
  SIGNAL p17band_cast                     : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL p17band_mul_temp                 : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL p17band_add_cast                 : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL p17band_add_cast_1               : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL p17band_add_cast_2               : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL p17band_add_temp                 : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL p12tmp_add_cast                  : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL p12tmp_cast                      : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL p12tmp_mul_temp                  : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL p12tmp_add_cast_1                : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL p12tmp_add_cast_2                : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL p12tmp_add_temp                  : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL low_1                            : signed(15 DOWNTO 0);  -- sfix16_E1
  SIGNAL p21low_add_cast                  : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL p21low_cast                      : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL p21low_mul_temp                  : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL p21low_add_cast_1                : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL p21low_add_cast_2                : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL p21low_add_temp                  : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL tmp_12                           : signed(15 DOWNTO 0);  -- sfix16_E1
  SIGNAL p20tmp_cast                      : signed(32 DOWNTO 0);  -- sfix33_En15
  SIGNAL p20tmp_cast_1                    : signed(31 DOWNTO 0);  -- sfix32_En15
  SIGNAL tmp_13                           : signed(15 DOWNTO 0);  -- sfix16_E1
  SIGNAL p18tmp_cast                      : signed(32 DOWNTO 0);  -- sfix33_En15
  SIGNAL p18tmp_cast_1                    : signed(31 DOWNTO 0);  -- sfix32_En15
  SIGNAL tmp_14                           : signed(15 DOWNTO 0);  -- sfix16_E1
  SIGNAL p22tmp_cast                      : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL p22tmp_cast_1                    : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL tmp_15                           : signed(15 DOWNTO 0);  -- sfix16_E1
  SIGNAL p16tmp_cast                      : signed(32 DOWNTO 0);  -- sfix33_En15
  SIGNAL p16tmp_cast_1                    : signed(31 DOWNTO 0);  -- sfix32_En15
  SIGNAL tmp_17                           : signed(15 DOWNTO 0);  -- sfix16_E1
  SIGNAL tmp_18                           : signed(15 DOWNTO 0);  -- sfix16_E1
  SIGNAL p10tmp_add_cast                  : signed(32 DOWNTO 0);  -- sfix33_En15
  SIGNAL p10tmp_add_cast_1                : signed(32 DOWNTO 0);  -- sfix33_En15
  SIGNAL p10tmp_add_cast_2                : signed(31 DOWNTO 0);  -- sfix32_En15
  SIGNAL p10tmp_add_cast_3                : signed(32 DOWNTO 0);  -- sfix33_En15
  SIGNAL p10tmp_add_temp                  : signed(32 DOWNTO 0);  -- sfix33_En15
  SIGNAL tmp_19                           : signed(15 DOWNTO 0);  -- sfix16_E1
  SIGNAL p8tmp_add_cast                   : signed(32 DOWNTO 0);  -- sfix33_En15
  SIGNAL p8tmp_add_cast_1                 : signed(32 DOWNTO 0);  -- sfix33_En15
  SIGNAL p8tmp_add_cast_2                 : signed(31 DOWNTO 0);  -- sfix32_En15
  SIGNAL p8tmp_add_cast_3                 : signed(32 DOWNTO 0);  -- sfix33_En15
  SIGNAL p8tmp_add_temp                   : signed(32 DOWNTO 0);  -- sfix33_En15
  SIGNAL tmp_20                           : signed(15 DOWNTO 0);  -- sfix16_E1
  SIGNAL p13tmp_add_cast                  : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL p13tmp_add_cast_1                : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL p13tmp_add_cast_2                : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL p13tmp_add_cast_3                : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL p13tmp_add_temp                  : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL tmp_21                           : signed(15 DOWNTO 0);  -- sfix16_E1
  SIGNAL p5tmp_add_cast                   : signed(32 DOWNTO 0);  -- sfix33_En15
  SIGNAL p5tmp_add_cast_1                 : signed(32 DOWNTO 0);  -- sfix33_En15
  SIGNAL p5tmp_add_cast_2                 : signed(31 DOWNTO 0);  -- sfix32_En15
  SIGNAL p5tmp_add_cast_3                 : signed(32 DOWNTO 0);  -- sfix33_En15
  SIGNAL p5tmp_add_temp                   : signed(32 DOWNTO 0);  -- sfix33_En15
  SIGNAL tmp_23                           : signed(15 DOWNTO 0);  -- sfix16_E1

BEGIN
  type_unsigned <= unsigned(type_rsvd);

  enb <= clk_enable;

  reduced_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      type_rsvd_1 <= to_unsigned(16#0#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        type_rsvd_1 <= type_unsigned;
      END IF;
    END IF;
  END PROCESS reduced_process;


  MIDI_CC_FREQ_unsigned <= unsigned(MIDI_CC_FREQ);

  p33tmp_add_temp <= resize(MIDI_CC_FREQ_unsigned, 8) + to_unsigned(16#01#, 8);
  p33tmp_sub_cast <= signed(resize(p33tmp_add_temp, 32));
  tmp <= p33tmp_sub_cast - 1;

  -- HDL code generation from MATLAB function: andrew_filter_fixpt
  -- 
  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- 
  --                                                                          %
  -- 
  --          Generated by MATLAB 9.10 and Fixed-Point Designer 7.2           %
  -- 
  --                                                                          %
  -- 
  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- 
  -- https://www.musicdsp.org/en/latest/Filters/92-state-variable-filter-double-sampled-stable.html
  -- 
  -- https://www.mathworks.com/help/hdlcoder/ug/optimize-feedback-loop-design-and-maintain-high-data-precision-for-hdl-code-generation.html
  -- 
  -- check LUT_from_MIDI_Note.m
  tmp_1 <= tmp_24(to_integer(tmp));

  tmp_lut_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_2 <= tmp_1;
      END IF;
    END IF;
  END PROCESS tmp_lut_reg_process;


  in_signed <= signed(in_rsvd);

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_rsvd_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        in_rsvd_1 <= in_signed;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  CC_RES_unsigned <= unsigned(CC_RES);

  p31c_mul_temp <= CC_RES_unsigned * to_unsigned(16#8102#, 16);
  p31c_cast <= p31c_mul_temp(22 DOWNTO 7) + ('0' & p31c_mul_temp(6));
  -- CSD Encoding (32768) : 1000000000000000; Cost (Adders) = 0
  p31c_mul_temp_1 <= resize(p31c_cast & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);
  p31c_sub_cast <= resize(p31c_mul_temp_1, 34);
  c <= unsigned'("0100000000000000000000000000000000") - p31c_sub_cast;

  delayMatch_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      c_1 <= to_unsigned(0, 34);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        c_1 <= c;
      END IF;
    END IF;
  END PROCESS delayMatch_1_process;


  p29tmp_add_temp <= resize(MIDI_CC_FREQ_unsigned, 8) + to_unsigned(16#01#, 8);
  p29tmp_sub_cast <= signed(resize(p29tmp_add_temp, 32));
  tmp_3 <= p29tmp_sub_cast - 1;

  tmp_4 <= tmp_26(to_integer(tmp_3));

  tmp_lut_reg_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_5 <= tmp_4;
      END IF;
    END IF;
  END PROCESS tmp_lut_reg_1_process;


  y_1 <= resize(tmp_5 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 36);

  p26tmp_cast <= resize(c_1 & '0', 36);
  
  tmp_6 <= '1' WHEN p26tmp_cast > y_1 ELSE
      '0';

  tmp_7 <= resize(c & '0', 36);

  delayMatch_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_8 <= to_unsigned(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_8 <= tmp_7;
      END IF;
    END IF;
  END PROCESS delayMatch_2_process;


  
  tmp_9 <= tmp_8 WHEN tmp_6 = '0' ELSE
      y_1;

  damp <= tmp_9(33 DOWNTO 18) + ('0' & tmp_9(17));

  p14notch_sub_cast <= resize(in_rsvd_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 33);
  p14notch_cast <= signed(resize(damp, 17));
  p14notch_mul_temp <= p14notch_cast * band;
  p14notch_sub_cast_1 <= p14notch_mul_temp(31 DOWNTO 0);
  p14notch_sub_cast_2 <= resize(p14notch_sub_cast_1, 33);
  p14notch_sub_temp <= p14notch_sub_cast - p14notch_sub_cast_2;
  notch <= p14notch_sub_temp(30 DOWNTO 15) + ('0' & p14notch_sub_temp(14));

  p9high_sub_cast <= resize(notch & '0', 18);
  p9high_sub_cast_1 <= resize(tmp_10, 18);
  p9high_sub_temp <= p9high_sub_cast - p9high_sub_cast_1;
  high <= p9high_sub_temp(15 DOWNTO 0);

  p7tmp_cast <= signed(resize(tmp_2, 17));
  p7tmp_mul_temp <= p7tmp_cast * high;
  p7tmp_add_cast <= p7tmp_mul_temp(31 DOWNTO 0);
  p7tmp_add_cast_1 <= resize(p7tmp_add_cast, 33);
  p7tmp_add_cast_2 <= resize(band & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 33);
  p7tmp_add_temp <= p7tmp_add_cast_1 + p7tmp_add_cast_2;
  tmp_11 <= p7tmp_add_temp(30 DOWNTO 15) + ('0' & p7tmp_add_temp(14));

  band_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      band_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        band_1 <= tmp_11;
      END IF;
    END IF;
  END PROCESS band_reg_process;


  p23notch_sub_cast <= resize(in_rsvd_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 33);
  p23notch_cast <= signed(resize(damp, 17));
  p23notch_mul_temp <= p23notch_cast * band_1;
  p23notch_sub_cast_1 <= p23notch_mul_temp(31 DOWNTO 0);
  p23notch_sub_cast_2 <= resize(p23notch_sub_cast_1, 33);
  p23notch_sub_temp <= p23notch_sub_cast - p23notch_sub_cast_2;
  notch_1 <= p23notch_sub_temp(30 DOWNTO 15) + ('0' & p23notch_sub_temp(14));

  p19high_sub_cast <= resize(notch_1 & '0', 18);
  p19high_sub_cast_1 <= resize(low, 18);
  p19high_sub_temp <= p19high_sub_cast - p19high_sub_cast_1;
  high_1 <= p19high_sub_temp(15 DOWNTO 0);

  p17band_cast <= signed(resize(tmp_2, 17));
  p17band_mul_temp <= p17band_cast * high_1;
  p17band_add_cast <= p17band_mul_temp(31 DOWNTO 0);
  p17band_add_cast_1 <= resize(p17band_add_cast, 33);
  p17band_add_cast_2 <= resize(band_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 33);
  p17band_add_temp <= p17band_add_cast_1 + p17band_add_cast_2;
  band <= p17band_add_temp(30 DOWNTO 15) + ('0' & p17band_add_temp(14));

  p12tmp_add_cast <= resize(low & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 33);
  p12tmp_cast <= signed(resize(tmp_2, 17));
  p12tmp_mul_temp <= p12tmp_cast * band;
  p12tmp_add_cast_1 <= p12tmp_mul_temp(31 DOWNTO 0);
  p12tmp_add_cast_2 <= resize(p12tmp_add_cast_1, 33);
  p12tmp_add_temp <= p12tmp_add_cast + p12tmp_add_cast_2;
  tmp_10 <= p12tmp_add_temp(30 DOWNTO 15) + ('0' & p12tmp_add_temp(14));

  low_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      low_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        low_1 <= tmp_10;
      END IF;
    END IF;
  END PROCESS low_reg_process;


  p21low_add_cast <= resize(low_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 33);
  p21low_cast <= signed(resize(tmp_2, 17));
  p21low_mul_temp <= p21low_cast * band_1;
  p21low_add_cast_1 <= p21low_mul_temp(31 DOWNTO 0);
  p21low_add_cast_2 <= resize(p21low_add_cast_1, 33);
  p21low_add_temp <= p21low_add_cast + p21low_add_cast_2;
  low <= p21low_add_temp(30 DOWNTO 15) + ('0' & p21low_add_temp(14));

  p20tmp_cast <= resize(low & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 33);
  p20tmp_cast_1 <= p20tmp_cast(31 DOWNTO 0);
  tmp_12 <= p20tmp_cast_1(31 DOWNTO 16) + ('0' & p20tmp_cast_1(15));

  p18tmp_cast <= resize(high_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 33);
  p18tmp_cast_1 <= p18tmp_cast(31 DOWNTO 0);
  tmp_13 <= p18tmp_cast_1(31 DOWNTO 16) + ('0' & p18tmp_cast_1(15));

  p22tmp_cast <= resize(notch_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 33);
  p22tmp_cast_1 <= p22tmp_cast(31 DOWNTO 0);
  tmp_14 <= p22tmp_cast_1(30 DOWNTO 15) + ('0' & p22tmp_cast_1(14));

  p16tmp_cast <= resize(band & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 33);
  p16tmp_cast_1 <= p16tmp_cast(31 DOWNTO 0);
  tmp_15 <= p16tmp_cast_1(31 DOWNTO 16) + ('0' & p16tmp_cast_1(15));

  p15_output : PROCESS (tmp_12, tmp_13, tmp_14, tmp_15, type_rsvd_1)
    VARIABLE tmp16 : signed(15 DOWNTO 0);
  BEGIN
    CASE type_rsvd_1 IS
      WHEN "01" =>
        tmp16 := tmp_13;
      WHEN "11" =>
        tmp16 := tmp_14;
      WHEN "10" =>
        tmp16 := tmp_15;
      WHEN OTHERS => 
        tmp16 := tmp_12;
    END CASE;
    tmp_17 <= tmp16;
  END PROCESS p15_output;


  p10tmp_add_cast <= resize(tmp_17 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 33);
  p10tmp_add_cast_1 <= resize(tmp_10 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 33);
  p10tmp_add_cast_2 <= p10tmp_add_cast_1(31 DOWNTO 0);
  p10tmp_add_cast_3 <= resize(p10tmp_add_cast_2, 33);
  p10tmp_add_temp <= p10tmp_add_cast + p10tmp_add_cast_3;
  tmp_18 <= p10tmp_add_temp(31 DOWNTO 16) + ('0' & p10tmp_add_temp(15));

  p8tmp_add_cast <= resize(tmp_17 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 33);
  p8tmp_add_cast_1 <= resize(high & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 33);
  p8tmp_add_cast_2 <= p8tmp_add_cast_1(31 DOWNTO 0);
  p8tmp_add_cast_3 <= resize(p8tmp_add_cast_2, 33);
  p8tmp_add_temp <= p8tmp_add_cast + p8tmp_add_cast_3;
  tmp_19 <= p8tmp_add_temp(31 DOWNTO 16) + ('0' & p8tmp_add_temp(15));

  p13tmp_add_cast <= resize(tmp_17 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 33);
  p13tmp_add_cast_1 <= resize(notch & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 33);
  p13tmp_add_cast_2 <= p13tmp_add_cast_1(31 DOWNTO 0);
  p13tmp_add_cast_3 <= resize(p13tmp_add_cast_2, 33);
  p13tmp_add_temp <= p13tmp_add_cast + p13tmp_add_cast_3;
  tmp_20 <= p13tmp_add_temp(30 DOWNTO 15) + ('0' & p13tmp_add_temp(14));

  p5tmp_add_cast <= resize(tmp_17 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 33);
  p5tmp_add_cast_1 <= resize(tmp_11 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 33);
  p5tmp_add_cast_2 <= p5tmp_add_cast_1(31 DOWNTO 0);
  p5tmp_add_cast_3 <= resize(p5tmp_add_cast_2, 33);
  p5tmp_add_temp <= p5tmp_add_cast + p5tmp_add_cast_3;
  tmp_21 <= p5tmp_add_temp(31 DOWNTO 16) + ('0' & p5tmp_add_temp(15));

  p4_output : PROCESS (tmp_18, tmp_19, tmp_20, tmp_21, type_rsvd_1)
    VARIABLE tmp22 : signed(15 DOWNTO 0);
  BEGIN
    CASE type_rsvd_1 IS
      WHEN "01" =>
        tmp22 := tmp_19;
      WHEN "11" =>
        tmp22 := tmp_20;
      WHEN "10" =>
        tmp22 := tmp_21;
      WHEN OTHERS => 
        tmp22 := tmp_18;
    END CASE;
    tmp_23 <= tmp22;
  END PROCESS p4_output;


  y <= std_logic_vector(tmp_23);

  alpha1 <= clk_enable;

END rtl;

