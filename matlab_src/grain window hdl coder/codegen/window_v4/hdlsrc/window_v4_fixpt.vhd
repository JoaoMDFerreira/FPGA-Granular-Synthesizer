-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\Asurans\Downloads\fac\tese\grain window hdl coder\codegen\window_v4\hdlsrc\window_v4_fixpt.vhd
-- Created: 2024-03-03 22:43:57
-- 
-- Generated by MATLAB 9.10, MATLAB Coder 5.2 and HDL Coder 3.18
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: window_v4_fixpt
-- Source Path: window_v4_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY window_v4_fixpt IS
  PORT( clk                               :   IN    std_logic;
        CC_attack                         :   IN    unsigned(6 DOWNTO 0);  -- ufix7
        CC_release                        :   IN    unsigned(6 DOWNTO 0);  -- ufix7
        current                           :   IN    unsigned(15 DOWNTO 0);  -- ufix16
        size                              :   IN    unsigned(15 DOWNTO 0);  -- ufix16
        in_rsvd                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        out_rsvd                          :   OUT   signed(15 DOWNTO 0)  -- sfix16
        );
END window_v4_fixpt;


ARCHITECTURE rtl OF window_v4_fixpt IS

  -- Constants
  CONSTANT C_divbyzero_p                  : signed(39 DOWNTO 0) := 
    signed'(X"7FFFFFFFFF");  -- sfix40
  CONSTANT C_divbyzero_n                  : signed(39 DOWNTO 0) := 
    signed'(X"8000000000");  -- sfix40

  -- Signals
  SIGNAL CC_attack_1                      : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL CC_release_1                     : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL current_1                        : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL size_1                           : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL in_rsvd_1                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL out_rsvd_1                       : signed(15 DOWNTO 0);  -- sfix16

BEGIN
  in_0_pipe_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      CC_attack_1 <= CC_attack;
    END IF;
  END PROCESS in_0_pipe_process;


  in_1_pipe_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      CC_release_1 <= CC_release;
    END IF;
  END PROCESS in_1_pipe_process;


  in_2_pipe_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      current_1 <= current;
    END IF;
  END PROCESS in_2_pipe_process;


  in_3_pipe_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      size_1 <= size;
    END IF;
  END PROCESS in_3_pipe_process;


  in_4_pipe_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      in_rsvd_1 <= in_rsvd;
    END IF;
  END PROCESS in_4_pipe_process;


  window_v4_fixpt_1_output : PROCESS (CC_attack_1, CC_release_1, current_1, in_rsvd_1, size_1)
    VARIABLE interrim_1 : signed(15 DOWNTO 0);
    VARIABLE tmp : signed(51 DOWNTO 0);
    VARIABLE interrim_2 : signed(15 DOWNTO 0);
    VARIABLE tmp_0 : signed(51 DOWNTO 0);
    VARIABLE attack : unsigned(11 DOWNTO 0);
    VARIABLE release : unsigned(11 DOWNTO 0);
    VARIABLE tmp_1 : std_logic;
    VARIABLE div_temp : signed(39 DOWNTO 0);
    VARIABLE div_temp_0 : signed(39 DOWNTO 0);
    VARIABLE sub_temp : unsigned(16 DOWNTO 0);
    VARIABLE cast : signed(17 DOWNTO 0);
    VARIABLE mul_temp : signed(33 DOWNTO 0);
    VARIABLE sub_temp_0 : unsigned(16 DOWNTO 0);
    VARIABLE cast_0 : signed(17 DOWNTO 0);
    VARIABLE mul_temp_0 : signed(33 DOWNTO 0);
    VARIABLE add_temp : unsigned(7 DOWNTO 0);
    VARIABLE mul_temp_1 : unsigned(23 DOWNTO 0);
    VARIABLE mul_temp_2 : unsigned(39 DOWNTO 0);
    VARIABLE add_cast : unsigned(16 DOWNTO 0);
    VARIABLE add_temp_0 : unsigned(7 DOWNTO 0);
    VARIABLE mul_temp_3 : unsigned(23 DOWNTO 0);
    VARIABLE mul_temp_4 : unsigned(39 DOWNTO 0);
    VARIABLE add_cast_0 : unsigned(16 DOWNTO 0);
    VARIABLE cast_1 : signed(12 DOWNTO 0);
    VARIABLE slice_cast : signed(39 DOWNTO 0);
    VARIABLE slice_cast_0 : signed(12 DOWNTO 0);
    VARIABLE slice_cast_1 : signed(39 DOWNTO 0);
    VARIABLE cast_2 : signed(39 DOWNTO 0);
    VARIABLE cast_3 : signed(12 DOWNTO 0);
    VARIABLE cast_4 : signed(12 DOWNTO 0);
    VARIABLE slice_cast_2 : signed(39 DOWNTO 0);
    VARIABLE slice_cast_3 : signed(12 DOWNTO 0);
    VARIABLE slice_cast_4 : signed(39 DOWNTO 0);
    VARIABLE cast_5 : signed(39 DOWNTO 0);
    VARIABLE cast_6 : signed(12 DOWNTO 0);
  BEGIN
    div_temp := to_signed(0, 40);
    div_temp_0 := to_signed(0, 40);
    slice_cast_1 := to_signed(0, 40);
    slice_cast_4 := to_signed(0, 40);
    cast_1 := to_signed(16#0000#, 13);
    slice_cast := to_signed(0, 40);
    slice_cast_0 := to_signed(16#0000#, 13);
    cast_2 := to_signed(0, 40);
    cast_3 := to_signed(16#0000#, 13);
    cast_4 := to_signed(16#0000#, 13);
    slice_cast_2 := to_signed(0, 40);
    slice_cast_3 := to_signed(16#0000#, 13);
    cast_5 := to_signed(0, 40);
    cast_6 := to_signed(16#0000#, 13);
    --HDL code generation from MATLAB function: window_v4_fixpt
    sub_temp := resize(current_1, 17) - to_unsigned(16#00001#, 17);
    cast := signed(resize(sub_temp, 18));
    mul_temp := cast * in_rsvd_1;
    interrim_1 := mul_temp(15 DOWNTO 0);
    IF interrim_1 < to_signed(16#0000#, 16) THEN 
      tmp := signed'(X"8000000000000");
    ELSE 
      tmp := signed'(X"7FFFFFFFFFFFF");
    END IF;
    sub_temp_0 := resize(size_1, 17) - resize(current_1, 17);
    cast_0 := signed(resize(sub_temp_0, 18));
    mul_temp_0 := cast_0 * in_rsvd_1;
    interrim_2 := mul_temp_0(15 DOWNTO 0);
    IF interrim_2 < to_signed(16#0000#, 16) THEN 
      tmp_0 := signed'(X"8000000000000");
    ELSE 
      tmp_0 := signed'(X"7FFFFFFFFFFFF");
    END IF;
    --out = (size - current) /release *in;
    --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    --                                                                          %
    --          Generated by MATLAB 9.10 and Fixed-Point Designer 7.2           %
    --                                                                          %
    --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    --CC_attack and CC_release are MIDI CC parameters which can vary between
    --0-127 where 0=0% and 127=50%
    add_temp := resize(CC_attack_1, 8) + to_unsigned(16#01#, 8);
    mul_temp_1 := add_temp * to_unsigned(16#8080#, 16);
    mul_temp_2 := mul_temp_1 * size_1;
    add_cast := mul_temp_2(39 DOWNTO 23);
    attack := resize(resize(add_cast, 18) + to_unsigned(16#00001#, 18), 12);
    add_temp_0 := resize(CC_release_1, 8) + to_unsigned(16#01#, 8);
    mul_temp_3 := add_temp_0 * to_unsigned(16#8080#, 16);
    mul_temp_4 := mul_temp_3 * size_1;
    add_cast_0 := mul_temp_4(39 DOWNTO 23);
    release := resize(resize(add_cast_0, 18) + to_unsigned(16#00001#, 18), 12);
    IF current_1 <= resize(attack, 16) THEN 
      tmp_1 := '1';
    ELSE 
      tmp_1 := '0';
    END IF;
    IF tmp_1 = '1' THEN 
      IF  NOT (attack = to_unsigned(16#000#, 12)) THEN 
        cast_1 := signed(resize(attack, 13));
        slice_cast := interrim_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
        slice_cast_0 := signed(resize(attack, 13));
        IF slice_cast(39) = slice_cast_0(12) THEN 
          slice_cast_1 := C_divbyzero_p;
        ELSE 
          slice_cast_1 := C_divbyzero_n;
        END IF;
        cast_2 := interrim_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
        cast_3 := signed(resize(attack, 13));
        IF cast_1 = 0 THEN 
          div_temp := slice_cast_1;
        ELSE 
          div_temp := cast_2 / cast_3;
        END IF;
        tmp := resize(div_temp, 52);
      END IF;
    ELSE 
      tmp := to_signed(0, 52);
    END IF;
    IF tmp_1 = '1' THEN 
      out_rsvd_1 <= to_signed(16#0000#, 16);
    ELSIF resize(current_1, 17) < (resize(size_1, 17) - resize(release, 17)) THEN 
      out_rsvd_1 <= in_rsvd_1;
    ELSE 
      IF  NOT (release = to_unsigned(16#000#, 12)) THEN 
        cast_4 := signed(resize(release, 13));
        slice_cast_2 := interrim_2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
        slice_cast_3 := signed(resize(release, 13));
        IF slice_cast_2(39) = slice_cast_3(12) THEN 
          slice_cast_4 := C_divbyzero_p;
        ELSE 
          slice_cast_4 := C_divbyzero_n;
        END IF;
        cast_5 := interrim_2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
        cast_6 := signed(resize(release, 13));
        IF cast_4 = 0 THEN 
          div_temp_0 := slice_cast_4;
        ELSE 
          div_temp_0 := cast_5 / cast_6;
        END IF;
        tmp_0 := resize(div_temp_0, 52);
      END IF;
      out_rsvd_1 <= tmp_0(39 DOWNTO 24);
    END IF;
    IF tmp_1 = '1' THEN 
      out_rsvd_1 <= tmp(39 DOWNTO 24);
    END IF;
  END PROCESS window_v4_fixpt_1_output;


  out_0_pipe_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      out_rsvd <= out_rsvd_1;
    END IF;
  END PROCESS out_0_pipe_process;


END rtl;

