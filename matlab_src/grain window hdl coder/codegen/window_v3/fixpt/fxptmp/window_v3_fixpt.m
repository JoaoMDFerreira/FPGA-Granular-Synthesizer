%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                          %
%          Generated by MATLAB 9.10 and Fixed-Point Designer 7.2           %
%                                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#codegen
%CC_attack and CC_release are MIDI CC parameters which can vary between
%0-127 where 0=0% and 127=50%
function out = window_v3_fixpt(CC_attack, CC_release,current,size,in)
    fm = get_fimath();

    attack = fi(floor((CC_attack+fi(1, 0, 1, 0, fm))*fi(1/255, 0, 16, 23, fm) *size)+fi(1, 0, 1, 0, fm), 0, 15, 0, fm);
    release = fi(floor((CC_release+fi(1, 0, 1, 0, fm))*fi(1/255, 0, 16, 23, fm) *size)+fi(1, 0, 1, 0, fm), 0, 15, 0, fm);
    sustain = fi(fi_signed(size - attack) - release, 1, 17, 0, fm);
    
    if current <= attack
        out = fi(fi_div((current-fi(1, 0, 1, 0, fm)), attack) *in, 1, 16, 0, fm);
    elseif current < attack + sustain
        out = fi(in, 1, 16, 0, fm);
    else
        out = fi((fi(1, 0, 1, 0, fm) - fi_div((current - attack - sustain), release)) *in, 1, 16, 0, fm);
    end
end



function ntype = divideType(a,b)
    coder.inline( 'always' );
    nt1 = numerictype( a );
    nt2 = numerictype( b );
    maxFL = max( [ min( nt1.WordLength, nt1.FractionLength ), min( nt2.WordLength, nt2.FractionLength ) ] );
    FL = max( maxFL, 24 );
    extraBits = (FL - maxFL);
    WL = nt1.WordLength + nt2.WordLength;
    WL = min( WL, 124 );
    if (WL + extraBits)<64
        ntype = numerictype( nt1.Signed || nt2.Signed, WL + extraBits, FL );
    else
        ntype = numerictype( nt1.Signed || nt2.Signed, WL, FL );
    end
end


function c = fi_div(a,b)
    coder.inline( 'always' );
    a1 = fi( a, 'RoundMode', 'fix' );
    b1 = fi( b, 'RoundMode', 'fix' );
    nType = divideType( a1, b1 );
    if isfi( a ) && isfi( b ) && isscalar( b )
        c1 = divide( nType, a1, b1 );
        c = fi( c1, numerictype( c1 ), fimath( a ) );
    else
        c = fi( a / b, nType );
    end
end


function y = fi_signed(a)
    coder.inline( 'always' );
    if isfi( a ) && ~(issigned( a ))
        nt = numerictype( a );
        new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
        y = fi( a, new_nt, fimath( a ) );
    else
        y = a;
    end
end

function fm = get_fimath()
	fm = fimath('RoundingMethod', 'Floor',...
	     'OverflowAction', 'Wrap',...
	     'ProductMode','FullPrecision',...
	     'MaxProductWordLength', 128,...
	     'SumMode','FullPrecision',...
	     'MaxSumWordLength', 128);
end
